// This template is the baseline for
// all functional tests executed against the android-junit5 plugin.
// It is based on the Gradle Kotlin DSL (.kts) and provides several additional
// template placeholders markers, which are substituted upon creating virtual projects
// in which the test code is being executed for every supported Android Gradle Plugin.
//
// The individual configuration of each test depends on the config.toml file,
// located in the sub-folder next to its source code.

import org.gradle.api.tasks.testing.Test
import org.gradle.api.tasks.testing.logging.TestLogEvent

val androidGradlePluginVersion: String = "{{ AGP_VERSION }}"
val kotlinVersion: String = "{{ KOTLIN_VERSION }}"
val junitJupiterVersion: String = "{{ JUNIT_JUPITER_VERSION }}"
val junit5AndroidLibsVersion: String = "{{ JUNIT5_ANDROID_LIBS_VERSION }}"

buildscript {
  repositories {
    google()
    mavenCentral()
  }
}

plugins {
  id("com.android.application")

  {% if USE_KOTLIN %}
    id("org.jetbrains.kotlin.android")
  {% endif %}

  id("de.mannodermaus.android-junit5")
}

// Double-checking the integrity of the AGP version under test
val version = com.android.builder.model.Version.ANDROID_GRADLE_PLUGIN_VERSION
if (version != "${androidGradlePluginVersion}") {
  throw IllegalStateException("Incorrect AGP version. Expected ${androidGradlePluginVersion}, got $version")
}

repositories {
  google()
  mavenCentral()
}

android {
  val compileSdk: String = "{{ COMPILE_SDK_VERSION }}"
  val minSdk: Int = {{ MIN_SDK_VERSION }}
  val targetSdk: Int = {{ TARGET_SDK_VERSION }}

  compileSdkVersion("${compileSdk}")

  defaultConfig {
    minSdkVersion(minSdk)
    targetSdkVersion(targetSdk)

    {% if INCLUDE_ANDROID_RESOURCES %}
      testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
      testInstrumentationRunnerArguments["runnerBuilder"] = "de.mannodermaus.junit5.AndroidJUnit5Builder"
    {% endif %}

    {% if USE_CUSTOM_BUILD_TYPE %}
      buildTypes {
        register("{{ USE_CUSTOM_BUILD_TYPE }}")
      }
    {% endif %}
  }

  {% if USE_FLAVORS %}
    flavorDimensions("environment")
    productFlavors {
      register("free") {
        setDimension("environment")
      }
      register("paid") {
        setDimension("environment")
      }
    }
  {% endif %}

  testOptions {
    {% if RETURN_DEFAULT_VALUES %}
      unitTests.isReturnDefaultValues = true
    {% endif %}

    {% if INCLUDE_ANDROID_RESOURCES %}
      unitTests.isIncludeAndroidResources = true
    {% endif %}

    // Gradle 6.5 fixed the syntax for UnitTestOptions' DSL
    {% if atLeastGradle("6.5") %}
      unitTests.all { test ->
        test.testLogging {
          events(TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED)
        }
      }
    {% else %}
      // Lower versions of Gradle require more ceremony for UnitTestOptions
      unitTests.all(KotlinClosure1<Any, Test>({
        (this as Test).also {
          testLogging {
            events(TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED)
          }
        }
      }, unitTests))
    {% endif %}
  }
}

{% if INCLUDE_ANDROID_RESOURCES %}
  junitPlatform {
    instrumentationTests.integrityCheckEnabled = false
  }
{% endif %}

{% for type in DISABLE_TESTS_FOR_BUILD_TYPES %}
  {% if atLeastAgp("7.0.0-beta01") %}
    // New Variant API for AGP 7.0 and above (unit test stuff is accessed through ordinary variants now)
    androidComponents {
      beforeVariants(selector().withBuildType("{{ type }}")) { variant ->
        variant.enableUnitTest = false
      }
    }
  {% elseif atLeastAgp("4.2.0-beta01") %}
    // New Variant API for AGP 4.2 and above
    androidComponents {
      beforeUnitTests(selector().withBuildType("{{ type }}")) { test ->
        test.enabled = false
      }
    }
  {% elseif atLeastAgp("4.1") %}
    // Variant API for AGP 4.1
    android.onVariants.withBuildType("{{ type }}") {
      unitTest {
        enabled = false
      }
    }
  {% endif %}
{% end %}

dependencies {
  {% if USE_KOTLIN %}
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
  {% endif %}

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

  {% if INCLUDE_ANDROID_RESOURCES %}
    androidTestImplementation("androidx.test:runner:1.4.0")
    androidTestImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")

    androidTestImplementation("de.mannodermaus.junit5:android-test-core:${junit5AndroidLibsVersion}")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:${junit5AndroidLibsVersion}")
  {% endif %}
}
