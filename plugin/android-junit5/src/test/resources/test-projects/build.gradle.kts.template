// This template is the baseline for
// all functional tests executed against the android-junit5 plugin.
// It is based on the Gradle Kotlin DSL (.kts) and provides several additional
// template placeholders markers, which are substituted upon creating virtual projects
// in which the test code is being executed for every supported Android Gradle Plugin.
//
// The individual configuration of each test depends on the config.toml file,
// located in the sub-folder next to its source code.

import com.android.build.api.variant.HasUnitTestBuilder
import org.gradle.api.tasks.testing.Test
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

val androidGradlePluginVersion: String = "{{ AGP_VERSION }}"
val kotlinVersion: String = "{{ KOTLIN_VERSION }}"
val junitJupiterVersion: String = "{{ JUNIT_JUPITER_VERSION }}"
val junit5AndroidLibsVersion: String = "{{ JUNIT5_ANDROID_LIBS_VERSION }}"
val javaVersion = JavaVersion.VERSION_17

buildscript {
  repositories {
    google()
    mavenCentral()
    maven("https://oss.sonatype.org/content/repositories/snapshots") {
      mavenContent {
        snapshotsOnly()
      }
    }
  }
}

plugins {
  id("com.android.application")

  {% if USE_KOTLIN %}
    id("org.jetbrains.kotlin.android")
  {% endif %}

  {% if USE_JACOCO %}
    jacoco
  {% endif %}

  id("de.mannodermaus.android-junit5")
}

// Double-checking the integrity of the AGP version under test
val version = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
if (version != "${androidGradlePluginVersion}") {
  throw IllegalStateException("Incorrect AGP version. Expected ${androidGradlePluginVersion}, got $version")
}

repositories {
  google()
  mavenCentral()
  maven("https://oss.sonatype.org/content/repositories/snapshots") {
    mavenContent {
      snapshotsOnly()
    }
  }
}

android {
  val minSdkVersion: Int = {{ MIN_SDK_VERSION }}

  {% if OVERRIDE_SDK_VERSION %}
    val compileSdk: String = "android-{{ OVERRIDE_SDK_VERSION }}"
    val targetSdkVersion: Int = {{ OVERRIDE_SDK_VERSION }}
  {% else %}
    val compileSdk: String = "{{ COMPILE_SDK_VERSION }}"
    val targetSdkVersion: Int = {{ TARGET_SDK_VERSION }}
  {% endif %}

  compileSdkVersion("${compileSdk}")

  defaultConfig {
    namespace = "de.mannodermaus.app"

    minSdk = minSdkVersion
    targetSdk = targetSdkVersion

    {% if INCLUDE_ANDROID_RESOURCES %}
      testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
      testInstrumentationRunnerArguments["runnerBuilder"] = "de.mannodermaus.junit5.AndroidJUnit5Builder"
    {% endif %}

    {% if USE_CUSTOM_BUILD_TYPE %}
      buildTypes {
        register("{{ USE_CUSTOM_BUILD_TYPE }}")
      }
    {% endif %}
  }

  compileOptions {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
  }

  {% if USE_FLAVORS %}
    flavorDimensions("environment")
    productFlavors {
      register("free") {
        dimension = "environment"
      }
      register("paid") {
        dimension = "environment"
      }
    }
  {% endif %}

  testOptions {
    {% if RETURN_DEFAULT_VALUES %}
      unitTests.isReturnDefaultValues = true
    {% endif %}

    {% if INCLUDE_ANDROID_RESOURCES %}
      unitTests.isIncludeAndroidResources = true
    {% endif %}

    // Gradle 6.5 fixed the syntax for UnitTestOptions' DSL
    unitTests.all { test ->
      test.testLogging {
        events(TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED)
      }
    }
  }
}

{% if USE_KOTLIN %}
  kotlin {
    compilerOptions {
      jvmTarget = JvmTarget.fromTarget(javaVersion.toString())
    }
  }
{% endif %}

junitPlatform {
  {% if USE_JACOCO %}
    jacocoOptions {
      html {
        enabled.set(true)
        destination.set(layout.buildDirectory.dir("reports/jacocoCustom"))
      }
    }
  {% endif %}
}

{% for type in DISABLE_TESTS_FOR_BUILD_TYPES %}
  androidComponents {
    beforeVariants(selector().withBuildType("{{ type }}")) { variantBuilder ->
      (variantBuilder as HasUnitTestBuilder).enableUnitTest = false
    }
  }
{% end %}

dependencies {
  {% if USE_KOTLIN %}
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
  {% endif %}

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

  {% if INCLUDE_ANDROID_RESOURCES %}
    androidTestImplementation("androidx.test:runner:1.4.0")
    androidTestImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")

    androidTestImplementation("de.mannodermaus.junit5:android-test-core:${junit5AndroidLibsVersion}")
    androidTestRuntimeOnly("de.mannodermaus.junit5:android-test-runner:${junit5AndroidLibsVersion}")
  {% endif %}
}
